{"version":3,"sources":["../../src/concerns/response.js"],"names":["_","require","module","exports","res","statuses","json","response","status","respond","data","code","errors","statusText","singleError","error","console","log","general","ok","created","end","noContent","unauthorized","forbidden","notFound","internalError","collection","transformer","map","item","extraData","responseData"],"mappings":"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","file":"response.js","sourcesContent":["const _ = require('lodash');\n\nmodule.exports = (res) => {\n  const statuses = require('./statuses');\n\n  /**\n   * Returns a json response with the given input\n   *\n   * @param response (string || object)\n   * @returns {*}\n   */\n  const json = (response) => {\n    if (res) {\n      return res.status(response.status).json(response);\n    } else {\n      return response;\n    }\n  };\n\n  /**\n   * Returns a json positive response, which respects a default format.\n   * Receives data and code\n   *\n   * @param data (string || object)\n   * @param code (int)\n   * @returns {*}\n   */\n  const respond = (data, code) => {\n    return json({\n      errors: null,\n      data: data,\n      status: code,\n      statusText: statuses[code]\n    });\n  };\n\n  /**\n   * Returns a json errors response, respecting a default format.\n   * Receives errors and code\n   *\n   * @param errors (object || array)\n   * @param code (int)\n   * @returns {*}\n   */\n  const errors = (errors, code) => {\n    return json({\n      errors: errors,\n      data: null,\n      status: code,\n      statusText: statuses[code]\n    });\n  };\n\n  /**\n   * Returns a json single error response, respecting a default format.\n   * Receives error and code\n   *\n   * @param error (string || object with message)\n   * @param code (int)\n   * @returns {*}\n   */\n  const singleError = (error, code) => {\n    if (typeof(error) !== 'string') {\n      console.log(error);\n      return errors(error, code ? code : 422);\n    } else {\n      return errors({\n        general: [\n          error\n        ]\n      }, code ? code : 422);\n    }\n  };\n\n  /**\n   * Returns an OK response\n   *\n   * @param code (int)\n   * @returns {*}\n   */\n  const ok = (code) => {\n    return respond(null, code ? code : 200);\n  };\n\n  /**\n   * Returns a Created response\n   *\n   * @param data\n   * @returns {*}\n   */\n  const created = (data) => {\n    return res.status(201).json(data).end();\n  };\n\n  /**\n   * Returns a No content response\n   *\n   * @returns {*}\n   */\n  const noContent = () => {\n    return res.status(204).end();\n  };\n\n  /**\n   * Returns an unauthorized response\n   *\n   * @param error (string || object with message)\n   * @param code (int)\n   * @returns {*}\n   */\n  const unauthorized = (error, code) => {\n    return singleError(error, code ? code : 401);\n  };\n\n  /**\n   * Returns an forbidden response\n   *\n   * @param error (string || object with message)\n   * @param code (int)\n   * @returns {*}\n   */\n  const forbidden = (error, code) => {\n    return singleError(error, code ? code : 403);\n  };\n\n  /**\n   * Returns a not found response\n   *\n   * @param error (string || object with message)\n   * @param code (int)\n   * @returns {*}\n   */\n  const notFound = (error, code) => {\n    return singleError(error, code ? code : 404);\n  };\n\n  /**\n   * Returns an internal server error response\n   *\n   * @param error (string || object with message)\n   * @param code (int)\n   * @returns {*}\n   */\n  const internalError = (error, code) => {\n    return singleError(error, code ? code : 500);\n  };\n\n  /**\n   * Returns a response with the data collection, respecting a default format\n   *\n   * @param data\n   * @param transformer (optional)\n   * @param code (optional)\n   * @returns {*}\n   */\n  const collection = (data, transformer, code) => {\n    return respond(transformer ? _.map(data, transformer) : data, code ? code : 200);\n  };\n\n  /**\n   * Returns a response with an item, respecting a default format\n   *\n   * @param data\n   * @param transformer (optional)\n   * @param code (optional)\n   * @param extraData\n   * @returns {*}\n   */\n  const item = (data, transformer, code, extraData) => {\n    let responseData = {};\n    if (transformer) {\n      responseData = { ...transformer(data), ...extraData };\n    } else {\n      responseData = data;\n    }\n    return respond(responseData, code ? code : 200);\n  };\n\n  return {\n    collection,\n    item,\n    ok,\n    created,\n    noContent,\n    error: singleError,\n    unauthorized,\n    forbidden,\n    notFound,\n    internalError\n  };\n};\n"]}