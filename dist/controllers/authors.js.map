{"version":3,"sources":["../../src/controllers/authors.js"],"names":["db","api","Router","get","req","res","index","authors","collection","transformer","error","post","validationRules","store","body","author","created","id","show","params","item","notFound","put","update","noContent","delete","destroy","storeBookForAuthor","authorId","bookId","bookIds","authorBook","getBooksForAuthor","authorBooks","authorBookTransformer"],"mappings":"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","file":"authors.js","sourcesContent":["import { Router } from 'express';\r\nimport response from '../concerns/response';\r\nimport repository from '../repositories/author';\r\nimport validate from 'express-validation';\r\nimport validationRules from '../validation/author';\r\nimport transformer from '../transformers/author';\r\nimport authorBookTransformer from '../transformers/authorbook';\r\n\r\nexport default (db) => {\r\n\r\n  const api = new Router();\r\n\r\n  /**\r\n   * List all resources\r\n   * @swagger\r\n   * /api/authors:\r\n   *   get:\r\n   *     tags:\r\n   *       - Authors\r\n   *     name: List authors\r\n   *     summary: Lists all the authors\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     responses:\r\n   *       200:\r\n   *         description: An array of author objects\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.get('/', async (req, res) => {\r\n    try {\r\n      const authors = await repository(db).index();\r\n      return response(res).collection(authors, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a new resource\r\n   * @swagger\r\n   * /api/authors:\r\n   *   post:\r\n   *     tags:\r\n   *       - Authors\r\n   *     name: Create author\r\n   *     summary: Creates a new author\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: body\r\n   *         in: body\r\n   *         schema:\r\n   *           type: object\r\n   *           properties:\r\n   *             name:\r\n   *               type: string\r\n   *         required:\r\n   *           - name\r\n   *     responses:\r\n   *       200:\r\n   *         description: A author object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.post('/', validate(validationRules.store), async (req, res) => {\r\n    try {\r\n      const author = await repository(db).store(req.body);\r\n      return response(res).created({ id: author.id });\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Show an existing resource\r\n   * @swagger\r\n   * /api/authors/{id}:\r\n   *   get:\r\n   *     tags:\r\n   *       - Authors\r\n   *     name: Show author\r\n   *     summary: Shows an existing author\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A author object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.get('/:id', async (req, res) => {\r\n    try {\r\n      const author = await repository(db).show(req.params.id);\r\n      if (author !== null) {\r\n        return response(res).item(author, transformer);\r\n      }\r\n      return response(res).notFound('Author not found.');\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n\r\n  });\r\n\r\n  /**\r\n   * Update an existing resource\r\n   * @swagger\r\n   * /api/authors/{id}:\r\n   *   put:\r\n   *     tags:\r\n   *       - Authors\r\n   *     name: Update author\r\n   *     summary: Updates an existing author\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: body\r\n   *         in: body\r\n   *         schema:\r\n   *           type: object\r\n   *           properties:\r\n   *             name:\r\n   *               type: string\r\n   *         required:\r\n   *           - name\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       204:\r\n   *         description: No content\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.put('/:id', validate(validationRules.update), async (req, res) => {\r\n    try {\r\n      await repository(db).update(req.params.id, req.body);\r\n      return response(res).noContent();\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Destroy an existing resource\r\n   * @swagger\r\n   * /api/authors/{id}:\r\n   *   delete:\r\n   *     tags:\r\n   *       - Authors\r\n   *     name: Delete author\r\n   *     summary: Deletes an existing author\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A author object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   */\r\n  api.delete('/:id', async (req, res) => {\r\n    try {\r\n      const author = await repository(db).destroy(req.params.id);\r\n      return response(res).item(author, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Add a book to an existing resource\r\n   * @swagger\r\n   * /api/authors/{id}/book:\r\n   *   post:\r\n   *     tags:\r\n   *       - Authors\r\n   *     name: Add book to author\r\n   *     summary: Adds a book to an existing author\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: body\r\n   *         in: body\r\n   *         schema:\r\n   *           type: object\r\n   *           properties:\r\n   *             bookIds:\r\n   *               type: array\r\n   *         required:\r\n   *           - bookIds\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A author-book object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   */\r\n  api.post('/:id/books', async (req, res) => {\r\n    try {\r\n      const authorBook = await repository(db).storeBookForAuthor({ authorId: req.params.id, bookId: req.body.bookIds});\r\n      return response(res).created({ id: authorBook.id });\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Get books for an existing resource\r\n   * @swagger\r\n   * /api/authors/{id}/books:\r\n   *   get:\r\n   *     tags:\r\n   *       - Authors\r\n   *     name: Get books from author\r\n   *     summary: Gets books from an existing author\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A author-book object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   */\r\n  api.get('/:id/books', async (req, res) => {\r\n    try {\r\n      const authorBooks = await repository(db).getBooksForAuthor(req.params.id);\r\n      return response(res).collection(authorBooks, authorBookTransformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n\r\n  return api;\r\n}\r\n"]}