{"version":3,"sources":["../../src/repositories/user.js"],"names":["db","userModel","user","index","findAll","order","console","error","store","body","hashPassword","password","create","show","id","findByPk","update","where","destroy","getByEmail","email","findOne","raw","bcrypt","genSalt","salt","hash","comparePassword","pass","hashedPassword","compare"],"mappings":"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","file":"user.js","sourcesContent":["import bcrypt from 'bcrypt';\n\nexport default (db) => {\n\n  const userModel = db.user;\n\n  const index = async () => {\n    try {\n      return await userModel.findAll({\n        order: [\n          ['id', 'DESC']\n        ]\n      });\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const store = async (body) => {\n    try {\n      body.password = await hashPassword(body.password);\n      return await userModel.create(body);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const show = async (id) => {\n    try {\n      return await userModel.findByPk(id);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const update = async (id, body) => {\n    try {\n      await userModel.update(body, { where: { id } });\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const destroy = async (id) => {\n    try {\n      const user = await userModel.findByPk(id);\n      if (user) {\n        await user.destroy();\n      }\n      return user;\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const getByEmail = async (email) => {\n    try {\n      return await userModel.findOne({\n        where: {\n          email\n        },\n        raw: true\n      });\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const hashPassword = async (password) => {\n    try {\n      const salt = await bcrypt.genSalt(10);\n      return await bcrypt.hash(password, salt);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const comparePassword = async (pass, hashedPassword) => {\n    try {\n      return await bcrypt.compare(pass, hashedPassword);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  return {\n    index,\n    store,\n    show,\n    update,\n    destroy,\n    getByEmail,\n    comparePassword\n  };\n}\n"]}