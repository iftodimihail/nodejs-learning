{"version":3,"sources":["../src/index.js"],"names":["require","config","app","use","exposedHeaders","corsHeaders","bodyParser","json","limit","bodyLimit","urlencoded","extended","passport","initialize","db","swaggerOptions","swaggerDefinition","apis","swaggerSpec","get","req","res","setHeader","send","swaggerUi","serve","setup","next","notFound","err","validate","ValidationError","error","errors","internalError","listen","process","env","PORT","console","log"],"mappings":";;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAfAA,QAAQ,QAAR,EAAkBC,MAAlB;;AAiBA,IAAMC,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,oBAAK;AACXC,kBAAgBH,iBAAOI;AADZ,CAAL,CAAR;;AAIAH,IAAIC,GAAJ,CAAQG,qBAAWC,IAAX,CAAgB;AACtBC,SAAOP,iBAAOQ;AADQ,CAAhB,CAAR;;AAIAP,IAAIC,GAAJ,CAAQG,qBAAWI,UAAX,CAAsB;AAC5BC,YAAU;AADkB,CAAtB,CAAR;;AAIAT,IAAIC,GAAJ,CAAQS,mBAASC,UAAT,EAAR;;AAEA;;;AAGA,wBAAmB,UAACC,EAAD,EAAQ;;AAEzB;;;AAGA,MAAMC,iBAAiB;AACrBC,uBAAmBf,iBAAOe,iBADL;AAErBC,UAAM,CAAC,wBAAD;AAFe,GAAvB;AAIA,MAAMC,cAAc,4BAAaH,cAAb,CAApB;AACAb,MAAIiB,GAAJ,CAAQ,eAAR,EAAyB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC3CA,QAAIC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACAD,QAAIE,IAAJ,CAASL,WAAT;AACD,GAHD;AAIAhB,MAAIC,GAAJ,CAAQ,WAAR,EAAqBqB,2BAAUC,KAA/B,EAAsCD,2BAAUE,KAAV,CAAgBR,WAAhB,CAAtC;;AAEA;;;AAGA,0BAAeJ,EAAf,EAAmBF,kBAAnB;;AAEA;;;AAGAV,MAAIC,GAAJ,CAAQ,MAAR,EAAgB,sBAAOW,EAAP,CAAhB;;AAEA;;;AAGAZ,MAAIC,GAAJ,CAAQ,UAACiB,GAAD,EAAMC,GAAN,EAAWM,IAAX,EAAoB;AAC1B,4BAASN,GAAT,EAAcO,QAAd,CAAuB,WAAvB;AACD,GAFD;;AAIA;;;AAGA1B,MAAIC,GAAJ,CAAQ,UAAU0B,GAAV,EAAeT,GAAf,EAAoBC,GAApB,EAAyBM,IAAzB,EAA+B;AACrC,QAAIE,eAAeC,4BAASC,eAA5B,EAA6C;AAC3C,aAAO,wBAASV,GAAT,EAAcW,KAAd,CAAoB,oCAAuBH,IAAII,MAA3B,CAApB,CAAP;AACD;AACD,4BAASZ,GAAT,EAAca,aAAd,CAA4B,uBAA5B;AACD,GALD;;AAOA;;;AAGAhC,MAAIiC,MAAJ,CAAWC,QAAQC,GAAR,CAAYC,IAAvB,EAA6B,YAAM;AACjCC,YAAQC,GAAR,sBAAgCJ,QAAQC,GAAR,CAAYC,IAA5C;AACD,GAFD;AAGD,CAjDD","file":"index.js","sourcesContent":["require('dotenv').config();\n\nimport 'babel-polyfill';\nimport express from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport config from './config';\nimport response from './concerns/response';\nimport routes from './routes';\nimport validate from 'express-validation';\nimport {formatValidationErrors} from './concerns/errors';\nimport passport from 'passport';\nimport passportConfig from './passport';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport initializeDatabase from './database';\n\nconst app = express();\n\napp.use(cors({\n  exposedHeaders: config.corsHeaders\n}));\n\napp.use(bodyParser.json({\n  limit: config.bodyLimit\n}));\n\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\n\napp.use(passport.initialize());\n\n/**\n * If a connection to the Postgres is successfull, the API will continue loading\n */\ninitializeDatabase((db) => {\n\n  /**\n   * Configure & initialize swagger documentation\n   */\n  const swaggerOptions = {\n    swaggerDefinition: config.swaggerDefinition,\n    apis: ['./src/controllers/*.js'],\n  };\n  const swaggerSpec = swaggerJSDoc(swaggerOptions);\n  app.get('/swagger.json', function (req, res) {\n    res.setHeader('Content-Type', 'application/json');\n    res.send(swaggerSpec);\n  });\n  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n  /**\n   * Configure the passport logic\n   */\n  passportConfig(db, passport);\n\n  /**\n   * API router\n   */\n  app.use('/api', routes(db));\n\n  /**\n   * If any request url does not start with /api, the response will be 404\n   */\n  app.use((req, res, next) => {\n    response(res).notFound('Not found');\n  });\n\n  /**\n   * All the errors will be caught here\n   */\n  app.use(function (err, req, res, next) {\n    if (err instanceof validate.ValidationError) {\n      return response(res).error(formatValidationErrors(err.errors));\n    }\n    response(res).internalError('Internal server error');\n  });\n\n  /**\n   * Starts server on the specified port\n   */\n  app.listen(process.env.PORT, () => {\n    console.log(`Started on port ${ process.env.PORT }`);\n  });\n});\n"]}